// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatsystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SendMassage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
	RecvMassage(ctx context.Context, in *RecvRequest, opts ...grpc.CallOption) (Greeter_RecvMassageClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SendMassage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := c.cc.Invoke(ctx, "/chatsystem.Greeter/SendMassage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) RecvMassage(ctx context.Context, in *RecvRequest, opts ...grpc.CallOption) (Greeter_RecvMassageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], "/chatsystem.Greeter/RecvMassage", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterRecvMassageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_RecvMassageClient interface {
	Recv() (*RecvReply, error)
	grpc.ClientStream
}

type greeterRecvMassageClient struct {
	grpc.ClientStream
}

func (x *greeterRecvMassageClient) Recv() (*RecvReply, error) {
	m := new(RecvReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SendMassage(context.Context, *SendRequest) (*SendReply, error)
	RecvMassage(*RecvRequest, Greeter_RecvMassageServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SendMassage(context.Context, *SendRequest) (*SendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMassage not implemented")
}
func (UnimplementedGreeterServer) RecvMassage(*RecvRequest, Greeter_RecvMassageServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvMassage not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SendMassage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SendMassage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatsystem.Greeter/SendMassage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SendMassage(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_RecvMassage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecvRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).RecvMassage(m, &greeterRecvMassageServer{stream})
}

type Greeter_RecvMassageServer interface {
	Send(*RecvReply) error
	grpc.ServerStream
}

type greeterRecvMassageServer struct {
	grpc.ServerStream
}

func (x *greeterRecvMassageServer) Send(m *RecvReply) error {
	return x.ServerStream.SendMsg(m)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatsystem.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMassage",
			Handler:    _Greeter_SendMassage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecvMassage",
			Handler:       _Greeter_RecvMassage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatsystem.proto",
}
